# -*- coding: utf-8 -*-
"""tf-idf,cosine similarity_FixModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oRC-u6azU8ZPQ88VcM9UXJkL7f-YbNFK
"""

# Import Library
import json
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

### FUNCTION ###
def survey_similarity_model(query, choices, top_k=6):
    # Extract survey texts from choices
    survey_texts = [choice['survey'] for choice in choices]

    # Create TF-IDF vectors for query and choices
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(survey_texts)

    # Calculate cosine similarity between query and choices
    cosine_similarities = cosine_similarity(vectorizer.transform([query]), tfidf_matrix).flatten()

    # Get the indices of the top matches
    top_indices = cosine_similarities.argsort()[-top_k:][::-1]

    # Perform fuzzy matching and return the results
    results = []
    for index in top_indices:
        if survey_texts[index] != query:
            survey_id = choices[index]['surveyID']
            results.append(survey_id)

    return results
### END OF FUNCTION ###

# Read the JSON file
with open('/content/dataset_kuisioner.json') as json_file:
    data = json.load(json_file)

# Extract the surveys from the JSON data
surveys = data['surveys']

# Set the query
query = data['survey_title']

# Call the survey_similarity_model function
matches = survey_similarity_model(query, surveys)

# Create a dictionary with numbered keys
output_dict = {str(i): survey_id for i, survey_id in enumerate(matches)}

# Convert the dictionary to JSON
output = json.dumps(output_dict, indent=4)

# Print the output and save the JSON output to a file
print(output)
with open('/content/output.json', 'w') as json_output:
    json_output.write(output)
